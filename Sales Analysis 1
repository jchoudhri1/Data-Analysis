### Import necessary libraries
import pandas as pd
import os

### Task #1: Mergre 12 months of sales data into a single CSV
df = pd.read_csv("/Users/jchoudhri1/Datasets/Sales_Data/Sales_April_2019.csv")
files = [file for file in os.listdir('/Users/jchoudhri1/Datasets/Sales_Data')]

all_months_data = pd.DataFrame()

for file in files:
    df = pd.read_csv("/Users/jchoudhri1/Datasets/Sales_Data/"+file)
    all_months_data = pd.concat([all_months_data, df])
all_months_data.to_csv("all_data.csv", index=False)

### Read in updated dataframe
all_data = pd.read_csv("all_data.csv")
all_data.head()

Order ID	Product	Quantity Ordered	Price Each	Order Date	Purchase Address
0	295665	Macbook Pro Laptop	1	1700	12/30/19 00:01	136 Church St, New York City, NY 10001
1	295666	LG Washing Machine	1	600.0	12/29/19 07:03	562 2nd St, New York City, NY 10001
2	295667	USB-C Charging Cable	1	11.95	12/12/19 18:21	277 Main St, New York City, NY 10001
3	295668	27in FHD Monitor	1	149.99	12/22/19 15:13	410 6th St, San Francisco, CA 94016

### Clean up data
### Drop rows of NaN
nan_df = all_data[all_data.isna().any(axis=1)]
nan_df.head()

all_data = all_data.dropna(how = 'all')
all_data.head()
### Find 'OR' and delete it
all_data = all_data[all_data['Order Date'].str[0:2] != 'Or']
all_data.head()

Order ID	Product	Quantity Ordered	Price Each	Order Date	Purchase Address
0	295665	Macbook Pro Laptop	1	1700	12/30/19 00:01	136 Church St, New York City, NY 10001
1	295666	LG Washing Machine	1	600.0	12/29/19 07:03	562 2nd St, New York City, NY 10001
2	295667	USB-C Charging Cable	1	11.95	12/12/19 18:21	277 Main St, New York City, NY 10001
3	295668	27in FHD Monitor	1	149.99	12/22/19 15:13	410 6th St, San Francisco, CA 94016
4	295669	USB-C Charging Cable	1	11.95	12/18/19 12:38	43 Hill St, Atlanta, GA 30301

### Convert columns to correct type
all_data['Quantity Ordered'] = pd.to_numeric(all_data['Quantity Ordered'])
all_data['Price Each'] = pd.to_numeric(all_data['Price Each'])

all_data.head()

Order ID	Product	Quantity Ordered	Price Each	Order Date	Purchase Address
0	295665	Macbook Pro Laptop	1	1700.00	12/30/19 00:01	136 Church St, New York City, NY 10001
1	295666	LG Washing Machine	1	600.00	12/29/19 07:03	562 2nd St, New York City, NY 10001
2	295667	USB-C Charging Cable	1	11.95	12/12/19 18:21	277 Main St, New York City, NY 10001
3	295668	27in FHD Monitor	1	149.99	12/22/19 15:13	410 6th St, San Francisco, CA 94016
4	295669	USB-C Charging Cable	1	11.95	12/18/19 12:38	43 Hill St, Atlanta, GA 30301

### Augment data w additional columns
### Task 2: Add month column
all_data['Month'] = all_data['Order Date'].str[0:2]
all_data['Month'] = all_data['Month'].astype('int32')
all_data.head()

Order ID	Product	Quantity Ordered	Price Each	Order Date		Purchase Address						Month
0	295665	Macbook Pro Laptop	1	1700.00	12/30/19 00:01			136 Church St, New York City, NY 10001	12
1	295666	LG Washing Machine	1	600.00	12/29/19 07:03	562 	2nd St, New York City, NY 10001			12
2	295667	USB-C Charging Cable	1	11.95	12/12/19 18:21		277 Main St, New York City, NY 10001	12
3	295668	27in FHD Monitor	1	149.99	12/22/19 15:13	410 	6th St, San Francisco, CA 94016			12
4	295669	USB-C Charging Cable	1	11.95	12/18/19 12:38		43 Hill St, Atlanta, GA 30301			12

### Task 3: Add a sales column
all_data['Sales'] = all_data['Quantity Ordered'] * all_data['Price Each']
all_data.head()

# Task 4: Add a city column
def get_city (address):
    return address.split(',')[1]
def get_state (address): 
    return address.split(',')[2].split(' ')[1]
    
all_data['Cities'] = all_data['Purchase Address'].apply(lambda x: f"{get_city(x)} ({get_state(x)})")

all_data.head()

### Question 1: What was the best month for sales?Â¶
 results = all_data.groupby('Month').sum()
import matplotlib.pyplot as plt

months = range(1,13)

plt.bar(months, results ['Sales'])
plt.xticks(months)
plt.ylabel('Sales in USD ($)')
plt.xlabel('Month number')
plt.show()

Question 2: What city had the highest number of sales?
results = all_data.groupby('Cities').sum()
results
import matplotlib.pyplot as plt

cities = [city for city, df in all_data.groupby('Cities')]

plt.bar(cities, results ['Sales'])
plt.xticks(cities, rotation = 'vertical', size = 8)
plt.ylabel('Sales in USD ($)')
plt.xlabel('City name')
plt.show()

### Question 3: What time should we display advertisements to maximize likelihood of customers buying product?
all_data['Order Date'] = pd.to_datetime(all_data['Order Date'])
all_data['Hour'] = all_data['Order Date'].dt.hour
all_data['Minute'] = all_data['Order Date'].dt.minute
import matplotlib.pyplot as plt

hours = [hour for hour, df in all_data.groupby('Hour')]

plt.plot(hours, all_data.groupby(['Hour']).count())
plt.xticks(hours)
plt.xlabel('Hour')
plt.ylabel('Number of orders')
plt.grid()
plt.show()

# My recommendation is around 11am or 7pm (19)

### Question 4: Which objects are most often sold together?
all_data.head()
df = all_data[all_data['Order ID'].duplicated(keep = False)]

df['Grouped'] = df.groupby('Order ID')['Product'].transform(lambda x: ','.join(x))

df = df[['Order ID', 'Grouped']].drop_duplicates()

df.head()
from itertools import combinations
from collections import Counter

count = Counter()

for row in df['Grouped']: 
    row_list = row.split(',')
    count.update(Counter(combinations(row_list,2)))
    
for key, value in count.most_common(10):
    print(key, value)
    
    ('iPhone', 'Lightning Charging Cable') 1005
	('Google Phone', 'USB-C Charging Cable') 987
	('iPhone', 'Wired Headphones') 447
	('Google Phone', 'Wired Headphones') 414
	('Vareebadd Phone', 'USB-C Charging Cable') 361
	('iPhone', 'Apple Airpods Headphones') 360
	('Google Phone', 'Bose SoundSport Headphones') 220
	('USB-C Charging Cable', 'Wired Headphones') 160
	('Vareebadd Phone', 'Wired Headphones') 143
	('Lightning Charging Cable', 'Wired Headphones') 92

### Question 5: What product sold the most?
all_data.head()
product_group = all_data.groupby('Product')

quantity_ordered = product_group.sum()['Quantity Ordered']

products = [product for product, df in product_group]

plt.bar(products, quantity_ordered)
plt.ylabel('Quantity Ordered')
plt.xlabel('Product')
plt.xticks(products, rotation = 'vertical', size = 8)
plt.show()

prices = all_data.groupby('Product').mean()['Price Each']

fig,ax1 = plt.subplots()
ax2 = ax1.twinx()
ax1.bar(products, quantity_ordered, color = 'g')
ax2.plot(products, prices , 'b-')

ax1.set_xlabel('Product Name')
ax1.set_ylabel('Quantity Ordered', color = 'g')
ax2.set_ylabel('Price ($)', color = 'b')

ax1.set_xticklabels(products, rotation = 'vertical', size = 8)



plt.show()
### AAA Batteries (4 pack)
